{"version":3,"sources":["components/shared/navbar/navbar.jsx","components/Layout/layout.jsx","components/pages/Home/home.jsx","components/pages/GettingStarted/gettingStarted.jsx","assets/icons/wehelpyou-logo.png","components/pages/Intro/intro.jsx","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["AppNavbar","state","menu","path","title","Navbar","variant","expand","fixed","bg","Container","Brand","href","Toggle","aria-controls","Collapse","id","className","Nav","this","map","i","index","Item","Component","Layout","props","useState","hideOnScroll","setHideOnScroll","useScrollPosition","prevPos","isShow","currPos","y","useMemo","fluid","Row","Col","sm","children","Home","GettingStarted","Intro","src","logo","alt","to","App","basename","process","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAIqBA,E,kDACnB,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,KAAM,CACJ,CAAEC,KAAM,OAAQC,MAAO,QACvB,CAAED,KAAM,kBAAmBC,MAAO,eAClC,CAAED,KAAM,aAAcC,MAAO,gBANrB,E,0CAWd,WACE,OACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,OAAOC,OAAO,KAAKC,MAAM,MAAMC,GAAG,OAAlD,SACE,eAACC,EAAA,EAAD,WACE,cAACL,EAAA,EAAOM,MAAR,CAAcC,KAAK,QAAnB,uBAGA,cAACP,EAAA,EAAOQ,OAAR,CAAeC,gBAAc,qBAC7B,cAACT,EAAA,EAAOU,SAAR,CACEC,GAAG,mBACHC,UAAU,sBAFZ,SAIE,cAACC,EAAA,EAAD,UACGC,KAAKlB,MAAMC,KAAKkB,KAAI,SAACC,EAAGC,GACvB,OACE,cAACJ,EAAA,EAAIK,KAAL,UACE,cAAC,IAAD,CAAYN,UAAU,WAAWL,KAAI,WAAMS,EAAElB,MAA7C,SACGkB,EAAEjB,SAFQkB,mB,GA3BME,aCkCxBC,EAhCA,SAAAC,GAAU,IAAD,EACkBC,oBAAS,GAD3B,mBACfC,EADe,KACDC,EADC,KActB,OAXAC,6BACE,YAA2B,IAAxBC,EAAuB,EAAvBA,QACKC,EADkB,EAAdC,QACaC,EAAIH,EAAQG,EAC/BF,IAAWJ,GAAcC,EAAgBG,KAE/C,CAACJ,IACD,GACA,EACA,KAGKO,mBACL,kBACE,cAACzB,EAAA,EAAD,CAAW0B,MAAM,OAAOpB,GAAG,YAA3B,SACE,eAACqB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKtB,GAAG,SAASuB,GAAG,KAApB,SAEE,cAAC,EAAD,MAEF,cAACD,EAAA,EAAD,CAAKtB,GAAG,OAAOuB,GAAG,KAAlB,SACGb,EAAMc,kBAKf,CAACZ,KC/BgBa,E,4JACnB,WACE,OACE,cAAC/B,EAAA,EAAD,2B,GAH4Bc,aCCbkB,E,4JACnB,WACE,OACE,cAAC,EAAD,UACE,cAAC,EAAD,U,GAJoClB,aCJ7B,MAA0B,2CCKpBmB,E,4JACnB,WACE,OACE,qBAAK1B,UAAU,MAAf,SACA,yBAAQA,UAAU,aAAlB,UACE,2CACA,qBAAK2B,IAAKC,EAAM5B,UAAU,WAAW6B,IAAI,SACzC,sGAGA,cAAC,IAAD,CAAMC,GAAG,mBAAT,+C,GAV2BvB,aCWpBwB,MAXf,WACE,OACE,cAAC,IAAD,CAAQC,SAAUC,OAAlB,SACE,sBAAKlC,GAAG,iBAAR,UACE,cAAC,IAAD,CAAOmC,OAAK,EAAChD,KAAK,IAAIiD,UAAWT,IACjC,cAAC,IAAD,CAAOxC,KAAK,mBAAmBiD,UAAWV,UCEnCW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCKMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDjB,IDmHM,kBAAmBkB,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAACkB,GAClCA,EAAaC,kB","file":"static/js/main.c7b90cb0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport AnchorLink from \"react-anchor-link-smooth-scroll\";\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\n\nexport default class AppNavbar extends Component {\n  constructor() {\n    super();\n    this.state = {\n      menu: [\n        { path: \"home\", title: \"Home\" },\n        { path: \"getting-started\", title: \"Get Started\" },\n        { path: \"components\", title: \"Components\" },\n      ]\n    };\n  }\n\n  render() {\n    return (\n      <Navbar variant=\"dark\" expand=\"lg\" fixed=\"top\" bg=\"dark\">\n        <Container>\n          <Navbar.Brand href=\"#home\">\n            Wehelpyou\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse\n            id=\"basic-navbar-nav\"\n            className=\"justify-content-end\"\n          >\n            <Nav>\n              {this.state.menu.map((i, index) => {\n                return (\n                  <Nav.Item key={index}>\n                    <AnchorLink className=\"nav-link\" href={`#${i.path}`}>\n                      {i.title}\n                    </AnchorLink>\n                  </Nav.Item>\n                );\n              })}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n    );\n  }\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useScrollPosition } from \"@n8tb1t/use-scroll-position\";\nimport React, { useMemo, useState } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport AppNavbar from \"../../components/shared/navbar/navbar\";\n\nconst Layout = props => {\n  const [hideOnScroll, setHideOnScroll] = useState(true);\n\n  useScrollPosition(\n    ({ prevPos, currPos }) => {\n      const isShow = currPos.y > prevPos.y;\n      if (isShow !== hideOnScroll) setHideOnScroll(isShow);\n    },\n    [hideOnScroll],\n    false,\n    false,\n    300\n  );\n\n  return useMemo(\n    () => (\n      <Container fluid=\"true\" id=\"container\">\n        <Row>\n          <Col id=\"navbar\" sm=\"12\">\n            {/* {!hideOnScroll && <AppNavbar />} */}\n            <AppNavbar/>\n          </Col>\n          <Col id=\"body\" sm=\"12\">\n            {props.children}\n          </Col>\n        </Row>\n      </Container>\n    ),\n    [hideOnScroll]\n  );\n};\n\nexport default Layout;","import React, { Component } from 'react';\nimport { Button, Container } from 'react-bootstrap';\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <Container> \n        Home nih\n      </Container>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Layout from '../../Layout/layout';\nimport Home from '../Home/home';\n\nexport default class GettingStarted extends Component {\n  render() {\n    return (\n      <Layout>\n        <Home/>\n      </Layout>\n    );\n  }\n}\n","export default __webpack_public_path__ + \"static/media/wehelpyou-logo.1bf829d3.png\";","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\n\nimport logo from \"../../../assets/icons/wehelpyou-logo.png\";\n\nexport default class Intro extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n      <header className=\"App-header\">\n        <h3>Wehelpyou</h3>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          This is unofficial mobile documentation for developer getting started\n        </p>\n        <Link to=\"/getting-started\"> Click here to continue </Link>\n      </header>\n    </div>\n    );\n  }\n}\n","import { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport GettingStarted from \"./components/pages/GettingStarted/gettingStarted\";\nimport Intro from \"./components/pages/Intro/intro\";\n\nfunction App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div id=\"router-wrapper\">\n        <Route exact path=\"/\" component={Intro} />\n        <Route path=\"/getting-started\" component={GettingStarted} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/styles/index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.unregister();\n"],"sourceRoot":""}