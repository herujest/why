{"version":3,"sources":["components/shared/navbar/navbar.jsx","components/Layout/layout.jsx","components/pages/Home/home.jsx","assets/icons/wehelpyou-logo.png","components/pages/Intro/intro.jsx","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["AppNavbar","useHistory","Navbar","variant","expand","fixed","className","Container","Brand","href","Toggle","aria-controls","Collapse","id","Nav","onSelect","item","console","log","path","title","map","i","index","Item","Link","Layout","props","useState","hideOnScroll","setHideOnScroll","useScrollPosition","prevPos","isShow","currPos","y","useMemo","fluid","Row","Col","sm","children","Home","Button","Component","Intro","history","useEffect","setTimeout","push","src","logo","alt","to","App","basename","process","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c39bb79.chunk.js","sourcesContent":["import React from \"react\";\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\nimport { useHistory } from \"react-router-dom\";\n\nconst AppNavbar = () =>  {\n  const history = useHistory()\n  const menu = [\n    { path: \"home\", title: \"Home\" },\n    { path: \"getting-started\", title: \"Get Started\" },\n    { path: \"components\", title: \"Components\" },\n  ];\n\n  return (\n    <Navbar variant=\"dark\" expand=\"lg\" fixed=\"top\" className=\"main-navbar\">\n      <Container>\n        <Navbar.Brand href=\"#home\">\n          Wehelpyou\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        <Navbar.Collapse\n          id=\"basic-navbar-nav\"\n          className=\"justify-content-start\"\n        >\n          <Nav onSelect={(item) => { \n            console.log(\"item\", item);\n           }}>\n            {menu.map((i, index) => {\n              return (\n                <Nav.Item key={index}>\n                  {/* <AnchorLink className=\"nav-link\" href={`${i.path}`}>\n                    {i.title}\n                  </AnchorLink> */}\n                  {/* <Link className=\"nav-link\" to={`${i.path}`}> {i.title} </Link> */}\n                  <Nav.Link >{i.title}</Nav.Link>\n                </Nav.Item>\n              );\n            })}\n          </Nav>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n\nexport default AppNavbar;","/* eslint-disable react-hooks/exhaustive-deps */\nimport { useScrollPosition } from \"@n8tb1t/use-scroll-position\";\nimport React, { useMemo, useState } from \"react\";\nimport { Col, Container, Row } from \"react-bootstrap\";\nimport AppNavbar from \"../../components/shared/navbar/navbar\";\n\nconst Layout = props => {\n  const [hideOnScroll, setHideOnScroll] = useState(true);\n\n  useScrollPosition(\n    ({ prevPos, currPos }) => {\n      const isShow = currPos.y > prevPos.y;\n      if (isShow !== hideOnScroll) setHideOnScroll(isShow);\n    },\n    [hideOnScroll],\n    false,\n    false,\n    300\n  );\n\n  return useMemo(\n    () => (\n      <Container fluid=\"true\" id=\"container\">\n        <Row>\n          <Col id=\"navbar\" sm=\"12\">\n            {/* {!hideOnScroll && <AppNavbar />} */}\n            <AppNavbar/>\n          </Col>\n          <Col id=\"body\" sm=\"12\">\n            {props.children}\n          </Col>\n        </Row>\n      </Container>\n    ),\n    [hideOnScroll]\n  );\n};\n\nexport default Layout;","import React, { Component } from 'react';\nimport { Button, Col, Jumbotron as Jumbo, Row } from 'react-bootstrap';\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div id=\"home\">\n        <Jumbo fluid=\"true\" className=\"jumbotron jumbotron-fluid \">\n          <div className=\"jumbo-content\">\n            <Row>\n              <Col sm=\"2\" ></Col>\n              <Col sm=\"7\">\n                <h1>Wehelpyou | Mobile Documentation</h1>\n                <br></br>\n                <p>It's contain all WHY mobile developer needs. Including how to use its available components and API integration. Build using Reaact Native and love.</p>\n                <Row>\n                  <Col>\n                    <div className=\"jumbo-buttons\">\n                      <Button sm=\"3\" variant=\"outline-light\">Getting Started</Button>\n                      <Button sm=\"3\" variant=\"outline-light margin-left\">Components</Button>\n                    </div>\n                  </Col>\n                </Row>\n                <Row>\n                  <p className=\"overlay\">Current App version : 1.6.3</p>\n                </Row>\n              </Col>\n            <Col sm=\"2\" ></Col>\n            </Row>\n          </div>\n        </Jumbo>\n        <div className=\"home-content\">\n          <Row>\n            <Col sm=\"4\">\n              <h4>\n                Our Libraries\n              </h4>\n              <p className=\"paragraf\">\n                Libraries collectively include all the UI and visual components used across all Wehelpyou products. The designer can simply link any of the libraries to the Figma page he/she is working on, and instantly access all the components within the library directly from Sketch. The libraries are constantly updated to feature the latest UI components across all platforms, so as to provide a centralised repository which features all the latest design elements.\n              </p>\n            </Col>\n            <Col sm=\"4\">\n              <h4>\n                The founding pillars\n              </h4>\n              <p className=\"paragraf\">\n                Fundamental design rules to help you create amazing user experiences, including guidelines to use Colors pallete, typhography, motion and others UI view.\n              </p>\n            </Col>\n            <Col sm=\"4\">\n              <h4>\n                API request\n              </h4>\n              <p className=\"paragraf\">\n                Describe how we used Wehelpyou API by giving API request and see its responses. And we can provide what endpoint that currently in use for mobile client\n              </p>\n            </Col>\n          </Row>\n        </div>\n\n      </div>\n    );\n  }\n}\n","export default __webpack_public_path__ + \"static/media/wehelpyou-logo.1bf829d3.png\";","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { useEffect } from 'react';\nimport { Link, useHistory } from \"react-router-dom\";\nimport logo from \"../../../assets/icons/wehelpyou-logo.png\";\n\n\nconst Intro = () => {\n  const history = useHistory();\n  useEffect(() => {\n    setTimeout(() => {\n       history.push(\"/home\");\n    }, 2000);\n  }, []);\n\n  return (\n    <div className=\"App\">\n    <header className=\"App-header\">\n      <h3>Wehelpyou</h3>\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <p>\n        This is unofficial mobile documentation for developer getting started\n      </p>\n      <Link to=\"/home\"> Click here to continue </Link>\n    </header>\n  </div>\n  );\n}\nexport default Intro;","import { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Layout from \"./components/Layout/layout\";\nimport Home from \"./components/pages/Home/home\";\nimport Intro from \"./components/pages/Intro/intro\";\n\nfunction App() {\n  return (\n    <Layout>\n      <Router basename={process.env.PUBLIC_URL}>\n        <div id=\"router-wrapper\">\n          <Route exact path=\"/\" component={Intro} />\n          <Route path=\"/home\" component={Home} />\n        </div>\n      </Router>\n    </Layout>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/styles/index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorker.unregister();\n"],"sourceRoot":""}